# 

import re

data = """
park 800905-1049118
kim  700905-1059119
"""
pat = re.compile("(\d{6}-\d{7})")
print(pat.sub("\g<1>-********",data))

# (기초) 메타 문자

# . ^ $ * + ? { } [ ] \ | ( )

# [] 문자클래스
# [abc] >>> a,b,c 중 정확히 한 개 의 문자가 있으면 매치 
# "a"    -> 매치
# "before"  -> b 기 있어서 매치
# "dude"   -> 매치되지 않음

# [a-c]  => [abc]
# [0-5]  => [012345]
# [A-Z]  => 알파벳 대문자
# [a-zA-Z]  => 모든 알파벳
# [0-9] => 모든숫자
# [가-힣] => 모든한글

# [^0-9]  => 숫자가 아닌 모든 문자(알파벳, 특수문자, 공백 등)
# [^abc]  => a,b,c 가 아닌 모든문자
# [^A-Z]  => 대문자 알파벳이 아닌 모든 문자

# 자주 사용되는 문자 클래스 []
# \d ==> [0-9] ==> 숫자
# \D ==> [^0-^9] ==> 숫자가 아닌것
# \s ==> (화이트 스페이스)공백 [\t \n \r \f \v]
# \S ==> (화이트 스페이스)공백이 아닌것
# \w ==> 문자 숫자 _ ==> [a-zA-Z0-9_] + 유니코드 문자
# \W ==> \w의 반대! [^a-zA-Z0-9_]

# ------ .(dot) 문자 ----------
# \n 을 제외한 모든 문자
# a.b  ==> ex) a1b aob a@b 등등 ==> a 모든문자b
# a[.]b  ==>   'a.b'

# ------ * 문자 ----------
# * 바로 앞에 있는 문자 0~ 무한대 반복 
# ca*t  ==> ct cat caat caaat 

#  ------ + 문자 ---------
# + 바로 앞에 있는 문자 1~무한대 반복
# ca+t ==> cat caat caaat

# ------- {} 문자 ---------
# {m} 바로 앞에 있는 문자 m번 반복
# {m,n} 바로 앞에 있는 문자 m~n 회 반복
# {m,} 바로 앞에 있는 문자 m 이상 반복
# {,n} 바로 앞에 있는 문자 n 이하 반복 

# {0,}  ===  *
# {1,}  ===  +

# ca{2}t ==> caat
# ca{2,5} ==> caat caaat caaaat caaaaat

# ------- ? 문자 ---------
# 0 번 혹은 1번 ( 나오거나 안나오거나 )
# {0, 1}과 동일
# 
# ab?c  ==> abc ac









