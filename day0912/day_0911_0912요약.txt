# ==============================================================
# Matplotlib & Pandas 그래프 정리
# ==============================================================

📌 <라인 그래프 Line>
plt.plot(시리즈)
plt.plot(x자료,y자료)
plt.plot(데이터프레임)

- 연도별 이동인구
- 분기별 매출

@@@ 코드 예시 @@@
기본세팅 - 타이틀,라벨,범례
추가세팅 - 주석,눈금,회전
그리는 방법 기본
여러개 그리기

---------------------------------------------------------------------------------------------------

1. 시리즈
plt.plot(sr_one)

2. x, y 지정
plt.plot(sr_one.index, sr_one.values, linestyle='dotted', marker='o')

3. 데이터프레임
df[['충청남도','경상북도']].T.plot()

4. 여러 개 직접 그리기 (plt.plot 여러번 호출)
plt.plot(col_years, df_3.loc['충청남도'], marker='o', label='서울→충남')
plt.plot(col_years, df_3.loc['경상북도'], marker='^', label='서울→경북')
plt.plot(col_years, df_3.loc['강원도'], marker='s', label='서울→강원')
plt.legend()

# ---- 옵션 ----
plt.title('서울 -> 경기 인구 이동', size=20)     # 제목
plt.xlabel('기간', size=12)                     # x축 라벨
plt.ylabel('이동 인구수', size=12)               # y축 라벨
plt.legend(labels=['서울->경기'], fontsize=12)   # 범례
plt.xticks(rotation=90)                         # 눈금 회전
plt.annotate('이건 직선', xy=(0,5), color='red') # 주석 추가

# ---- 사용상황 ----
# 시계열 데이터 (연도별/분기별 변화)
# 예: 연도별 인구 이동, 삼성전자 분기별 매출 추세

---------------------------------------------------------------------------------------------------

📌 <영역 그래프 Area>

# 누적 영역 그래프
df_4.plot(kind='area', stacked=True, alpha=0.2, figsize=(10,5))

# 객체 기반
ax = df_4.plot(kind='area', stacked=True, alpha=0.2, figsize=(10,5))
ax.set_title('서울 -> 타도시', size=20, color='brown')

# --- 옵션 ---
# stacked=True → 누적
# alpha=0.2 → 투명도

# --- 사용상황 ---
# 여러 값의 누적 추세를 한눈에 보여줄 때
# 예: 서울 → 타도시 인구 이동 비중 변화

---------------------------------------------------------------------------------------------------

📌 <막대 그래프 Bar>

# --- 세로 막대 ---
df_4.plot(kind='bar', figsize=(10,5), width=0.5, 
          color=['orange','green','skyblue','blue'])

# --- 가로 막대 ---
df_total.plot(kind='barh', figsize=(10,5))

plt.title('2010~2017 서울 -> 타도시 인구이동', fontsize=20)
plt.ylabel('전입지')
plt.xlabel('이동 인구수')

# --- 옵션 ---
# width=0.5 → 막대 두께
# color=[...] → 항목별 색상
# barh → 가로 방향

# --- 사용상황 ---
# 그룹별 비교 (전입지별, 국가별 등)
# 예: 2010~2017년 서울 → 충남/경북/강원/전남 인구이동

---------------------------------------------------------------------------------------------------

📌 <박스플롯 Box>

# 그룹별 연비 박스플롯
df.plot(kind='box', column=['mpg'], by='origin', figsize=(10,5),
        color={'boxes':'SeaGreen','whiskers':'Olive','medians':'red','caps':'blue'},
        sym='r+', vert=False)

# matplotlib 방식
ax.boxplot([df[df['origin']==1]['mpg'],
            df[df['origin']==2]['mpg'],
            df[df['origin']==3]['mpg']],
            labels=['USA','EU','JAPAN'])

# --- 옵션 ---
# sym='r+' → 이상치 빨간 +
# vert=False → 가로 박스플롯
# color={} → 요소별 색상 지정

# --- 사용상황 ---
# 데이터 분포, 중앙값, 이상치 확인
# 예: 제조국가별 연비 분포

---------------------------------------------------------------------------------------------------

📌 <원그래프 Pie>

df_origin['count'].plot(kind='pie',
                        autopct='%1.1f%%',
                        startangle=90,
                        colors=['chocolate','bisque','cadetblue'],
                        figsize=(6,6))
plt.title('Model Origin', size=20)
plt.ylabel('')

# --- 옵션 ---
# autopct='%1.1f%%' → 퍼센트 표시
# startangle=90 → 시작 각도
# colors=[...] → 색상

# --- 사용상황 ---
# 전체에서 차지하는 비율 시각화
# 예: 자동차 생산국 비율 (USA/EU/JAPAN)

---------------------------------------------------------------------------------------------------

📌 <히스토그램 Hist>

df['mpg'].plot(kind='hist', bins=10, color='coral', figsize=(8,5))
plt.title('Histogram')
plt.xlabel('mpg')

# --- 옵션 ---
# bins=10 → 구간 개수
# color='coral' → 색상

# --- 사용상황 ---
# 연속형 데이터의 분포 확인
# 예: 연비(mpg) 분포

---------------------------------------------------------------------------------------------------

📌 <산점도 Scatter>

# 단순 산점도
df.plot(kind='scatter', x='weight', y='mpg', c='coral', s=20, marker='*')

# 버블 차트 (크기 차등)
cylinders_size = (df['cylinders']/df['cylinders'].max()) * 300
df.plot(kind='scatter', x='weight', y='mpg', c='cylinders',
        cmap='plasma', s=cylinders_size, alpha=0.3)

# --- 옵션 ---
# c='컬럼명' → 값에 따라 색상 매핑
# cmap='plasma' → 팔레트
# s=값 → 점 크기

# --- 사용상황 ---
# 두 변수 관계 + 데이터 분포 확인
# 예: 차중(weight) vs 연비(mpg), 실린더 개수에 따른 차이
